#!/bin/bash
# 
# Technoplatz BI
# 
# Copyright (C) 2019-2023 Technoplatz IT Solutions GmbH, Mustafa Mat
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see https://www.gnu.org/licenses.
# 
# If your software can interact with users remotely through a computer
# network, you should also make sure that it provides a way for users to
# get its source.  For example, if your program is a web application, its
# interface could display a "Source" link that leads users to an archive
# of the code.  There are many ways you could offer source, and different
# solutions will be better for different programs; see section 13 for the
# specific requirements.
# 
# You should also get your employer (if you work as a programmer) or school,
# if any, to sign a "copyright disclaimer" for the program, if necessary.
# For more information on this, and how to apply and follow the GNU AGPL, see
# https://www.gnu.org/licenses.
# 

cat << EOF

Technoplatz BI
Copyright 2019-$(date +'%Y'), Technoplatz IT Solutions GmbH
https://bi.technoplatz.com

EOF

function helpBI() {
    echo "Available commands:"
    echo -e "\n./bi.sh install"
    echo "./bi.sh start"
    echo "./bi.sh restart"
    echo "./bi.sh stop"
    echo "./bi.sh update"
    echo "./bi.sh prune"
    echo "./bi.sh logs api|pwa|init|replicaset [num of records]"
    echo "./bi.sh help"
}

function installBI() {
    if [ -d $DIR ]; then
        while true; do
            read -p "$(echo -e "Oops! An existing ${COLOR}$(pwd)/$DIR${NOCOLOR} folder found. Do you want to remove it? (Y/n) ")" yn
            case $yn in
                [Y]* )
                    if [[ -f $DIR/$DOTENV ]]; then
                        BKFILE=$DOTENV-backup-$(date '+%Y%m%d%H%M%S')
                        cp $DIR/$DOTENV $BKFILE
                        echo -e "\n✔ Existing parameter file ${COLOR}$DOTENV${NOCOLOR} has been backed up as ${COLOR}$(pwd)/$BKFILE${NOCOLOR}."
                    fi
                    rm -rf $DIR
                    break;;
                [Nn]* )
                    echo -e "\n✘ Installation canceled."
                    return 0
                    ;;
                * ) 
                    echo -e "\n✘ Please enter ${COLOR}Y${NOCOLOR} or ${COLOR}n${NOCOLOR}.\n"
                    ;;
            esac
        done
    fi
    echo -e "\n✔ Installation started."
    mkdir -p $DIR/_init
    declare -a curlHeaders=("-H" "Accept: application/vnd.github.v3.raw")
    if [ $1 ]; then
        curlHeaders+=("-H" "Authorization: token $1")
    fi
    curl "${curlHeaders[@]}" -Ls -o $DIR/$DCYML -o $DIR/$DOTENV https://raw.githubusercontent.com/Technoplatz/bi/main/{$DCYML,$DOTENV}
    CONTD=$(cat $DIR/$DCYML | head -c 3)
    if [[ "$CONTD" == *"40"* ]]; then
        echo -e "✘ Sorry! Required files not received successfully ($CONTD)."
        echo -e "You may try to add your token ${COLOR}./bi.sh install [token]${NOCOLOR} as the way to get connected privately."
        return 0
    else
        echo -e "✔ Required files received successfully."
    fi
    INC=0
    if [[ ! -f $DIR/_init/.secret-key-password ]]; then
        touch $DIR/_init/.secret-key-password
        re='^[a-zA-Z]+$'
        while ! [[ ${DBPWD:0:1} =~ $re ]]
        do
            DBPWD=$(openssl rand -hex 12)
            let "INC+=1"
        done
        echo $DBPWD > $DIR/_init/.secret-key-password
    fi
    echo -e "✔ Installation completed successfully."
    echo -e "\n>>> NEXT STEPS:"
    echo -e "${COLOR}>>> Please note that your project folder is $(pwd)/$DIR${NOCOLOR}"
    echo -e ">>> 1. Go to ${COLOR}$DIR${NOCOLOR} folder and open ${COLOR}.env${NOCOLOR} file with any text editor."
    echo ">>> 2. Apply the necessary changes and save it."
    echo -e ">>> 3. Run ${COLOR}./bi.sh start${NOCOLOR} to make containers up and keep them running."
    echo -e "\nHere you go :)"
    return 1
}

function buildBI() {
    docker build --tag $NS/bi-api$SUFFIX:$TAG api/
    docker build --tag $NS/bi-pwa$SUFFIX:$TAG pwa/
    docker build --tag $NS/bi-replicaset$SUFFIX:$TAG _replicaset/
    docker build --tag $NS/bi-init$SUFFIX:$TAG _init/
    return 1
}

function startBI() {
    if [ ! -d $DIR ]; then
        echo -e "\n✘ Sorry! ${COLOR}$DIR${NOCOLOR} folder not found in the directory you are."
        echo -e "You need to start installation with ${COLOR}./bi.sh install${NOCOLOR} command."
        return 0
    fi
    echo -e "\nStarting containers...\n"
    SUFFIX=$SUFFIX docker compose -f $DIR/$DCYML up --detach --remove-orphans --no-build
    if [ $? -eq 0 ]; then
        echo -e "\n✔ Platform was started successfully."
        echo -e "Please be patient up to 20 seconds for the system to be functional."
    else
        echo -e "\n✘ Sorry! Process was terminated ($?)."
        return 0
    fi
    return 1
}

function updateBI() {
    if [ ! -d $DIR ]; then
        echo -e "\n✘ Sorry! ${COLOR}$DIR${NOCOLOR} folder not found in the directory you are."
        return 0
    fi
    declare -a curlHeaders=("-H" "Accept: application/vnd.github.v3.raw")
    if [ $1 ]; then
        curlHeaders+=("-H" "Authorization: token $1")
    fi
    curl "${curlHeaders[@]}" -Ls -o $DIR/$DCYML https://raw.githubusercontent.com/Technoplatz/bi/main/{$DCYML}
    CONTD=$(cat $DIR/$DCYML | head -c 3)
    if [[ "$CONTD" == *"40"* ]]; then
        echo -e "✘ Sorry! Configuration file not received successfully ($CONTD)."
        echo -e "You may try to add your token ${COLOR}./bi.sh update [token]${NOCOLOR} as the way to get connected privately."
        return 0
    else
        echo -e "✔ Configuration file received successfully.\n"
    fi
    SUFFIX=""
    SUFFIX=$SUFFIX docker compose -f $DIR/$DCYML pull
    if [ $? -eq 0 ]; then
        stopBI
        startBI
        echo -e "\n✔ The latest version received successfully."
    else
        echo -e "\n✘ Sorry! Process was terminated ($?)."
        return 0
    fi
    return 1
}

function pruneBI() {
    echo -e "Cleaning..."
    docker system prune --force
    if [ $? -eq 0 ]; then
        echo -e "✔ Dangling resources successfully removed."
    else
        echo -e "\n✘ Sorry! Process was terminated ($?)."
        return 0
    fi
    return 1
}

function stopBI() {
    echo -e "Stopping containers...\n"
    if [[ ! -z $(docker container ls -qa) ]]; then
        docker container stop $(docker container ls -qa)
        docker container rm $(docker container ls -qa)
        if [ $? -eq 0 ]; then
            echo -e "\n✔ Running containers stopped and removed successfully."
        else
            echo -e "\n✘ Sorry! Process was terminated ($?)."
            return 0
        fi
    else
        echo -e "✘ No active container found!"
    fi
    return 1
}

function logsBI() {
    if [ ! $1 ]; then
        echo -e "\n✘ Sorry! You need to provide a docker service ID."
        echo -e "Command should be given like ./bi.sh logs api|pwa|init|replicaset"
        return 0
    fi
    TAIL=$LOGTAIL
    if [[ ! -z $2 ]]; then
        TAIL=$2
    fi
    echo -e "Getting the last $TAIL records from $1 log...\n"
    docker logs --tail $TAIL $1
    return 1
}

# ENV VARIABLES
COLOR='\033[0;31m'
NOCOLOR='\033[0m'
TAG="latest"
NS="ghcr.io/technoplatz"
DIR="_bi"
DCYML="docker-compose.yml"
DOTENV=".env"
SUFFIX=""
LOGTAIL=20

if [ $2 ]; then
    SUFFIX=$2
fi

case $1 in
    "install")
	    installBI "$2"
	    ;;
    "start")
        startBI
        ;;
    "restart")
        stopBI
        startBI
        ;;
    "stop")
        stopBI
        ;;
    "prune")
        pruneBI "$2"
        ;;
    "update")
        updateBI "$2"
        ;;
    "logs")
        logsBI "$2" "$3"
        ;;
    "help")
        helpBI
        ;;
    "build")
        buildBI
        ;;
    *)
        echo "✘ Sorry. $1 is not an available command."
        helpBI
esac

echo
