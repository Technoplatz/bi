#!/bin/bash

#
# Technoplatz BI
#
# Copyright (C) 2019-2023 Technoplatz IT Solutions GmbH, Mustafa Mat
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see https://www.gnu.org/licenses.
#
# If your software can interact with users remotely through a computer
# network, you should also make sure that it provides a way for users to
# get its source.  For example, if your program is a web application, its
# interface could display a "Source" link that leads users to an archive
# of the code.  There are many ways you could offer source, and different
# solutions will be better for different programs; see section 13 for the
# specific requirements.
#
# You should also get your employer (if you work as a programmer) or school,
# if any, to sign a "copyright disclaimer" for the program, if necessary.
# For more information on this, and how to apply and follow the GNU AGPL, see
# https://www.gnu.org/licenses.
#

cat <<EOF

Technoplatz BI
Copyright 2019-$(date +'%Y'), Technoplatz IT Solutions GmbH
https://bi.technoplatz.com

EOF

function helpBI() {
    echo "Available commands:"
    echo "./bi-sh init"
    echo "./bi-sh start"
    echo "./bi-sh restart"
    echo "./bi-sh stop"
    echo "./bi-sh update"
    echo "./bi-sh prune [--all]"
    echo "./bi-sh logs api|pwa|init|replicaset|stream [last n rows]"
    echo "./bi-sh build [api|pwa|init|replicaset|stream]"
    echo "./bi-sh help"
}

function initBI() {
    echo "Initializing..."
    cp ./$DOTENV ./$DOTENV.bak.$(date '+%Y%m%d%H%M%S')
    curl -Ls -o ./$DCYML --create-dirs $RAWREPO/{$DCYML}
    if [ $? -eq 0 ]; then
        echo "✔ Initialized successfully."
    else
        echo -e "✘ Sorry! Process was terminated ($?)."
        return 0
    fi
    return 1
}

function updateBI() {
    echo "Updating..."
    docker compose -f ./$DCYML pull
    if [ $? -eq 0 ]; then
        echo -e "✔ The latest version received successfully."
        startBI
    else
        echo -e "✘ Sorry! Process was terminated ($?)."
        return 0
    fi
    return 1
}

function pruneBI() {
    echo -e "Cleaning..."
    docker system prune --force $1
    if [ $? -eq 0 ]; then
        echo "✔ Dangling and unused resources successfully removed."
    else
        echo -e "✘ Sorry! Process was terminated ($?)."
        return 0
    fi
    return 1
}

function startBI() {
    echo -e "\nStarting containers..."
    mkdir -p ./.mongo
    if [[ ! -f ./.mongo/mongo_tls_keyfile_password ]]; then
        openssl rand -hex 10 >./.mongo/mongo_tls_keyfile_password
    fi
    if [[ ! -f ./.mongo/mongo_username ]]; then
        echo "root" >./.mongo/mongo_username
    fi
    if [[ ! -f ./.mongo/mongo_password ]]; then
        openssl rand -hex 10 >./.mongo/mongo_password
    fi
    if [[ ! -f ./.mongo/mongo_initdb_root_username ]]; then
        echo "root" >./.mongo/mongo_initdb_root_username
    fi
    if [[ ! -f ./.mongo/mongo_initdb_root_password ]]; then
        openssl rand -hex 10 >./.mongo/mongo_initdb_root_password
    fi
    env docker compose --env-file $DOTENV -f ./$DCYML up --detach --remove-orphans --no-build
    if [ $? -eq 0 ]; then
        echo -e "\nCopying certificates to host..."
        docker cp init:/cert/mongo0.pem ./.mongo/mongo0.pem
        docker cp init:/cert/mongo-ca.pem ./.mongo/mongo-ca.pem
        echo -e "\n✔ Platform is up and running."
    else
        echo -e "\n✘ Sorry! Process was terminated ($?)."
        return 0
    fi
    return 1
}

function stopBI() {
    echo "Stopping containers..."
    if [[ ! -z $(docker container ls -qa) ]]; then
        docker container stop $(docker container ls -qa)
        docker container rm $(docker container ls -qa)
        if [ $? -eq 0 ]; then
            echo -e "\n✔ Running containers stopped and removed successfully."
        else
            echo "✘ Sorry! Process was terminated ($?)."
            return 0
        fi
    else
        echo -e "\n✘ No active container(s) found!"
    fi
    return 1
}

function logsBI() {
    if [ ! $1 ]; then
        echo "✘ Sorry! You need to provide a docker service ID."
        echo "Command should be given like ./bi-sh logs api|pwa|init|replicaset"
        return 0
    fi
    TAIL=$LOGTAIL
    if [[ ! -z $2 ]]; then
        TAIL=$2
    fi
    echo "Getting the last $TAIL rows from $1 log..."
    docker logs --tail $TAIL $1
    return 1
}

function buildBI() {
    docker compose --env-file $DOTENV -f ./$DCYML build $1
    if [ $? -ne 0 ]; then
        echo -e "\n✘ Sorry! An error occured."
        return 0
    fi
    echo -e "\nBuilt OK :)"
    startBI
    return 1
}

# ENV VARIABLES
COLOR='\033[0;31m'
NOCOLOR='\033[0m'
DCYML="docker-compose.yml"
DOTENV=".env-dev"
LOGTAIL=20
RAWREPO="https://raw.githubusercontent.com/Technoplatz/bi/main"

case $1 in
"init")
    initBI
    ;;
"start")
    startBI
    ;;
"restart")
    stopBI
    startBI
    ;;
"stop")
    stopBI
    ;;
"prune")
    pruneBI "$2"
    ;;
"update")
    updateBI
    ;;
"logs")
    logsBI "$2" "$3"
    ;;
"build")
    buildBI "$2"
    ;;
"help")
    helpBI
    ;;
*)
    echo "✘ Sorry. $1 is not an available command."
    helpBI
    ;;
esac

echo
