#
# Technoplatz BI
#
# Copyright (C) 2019-2023 Technoplatz IT Solutions GmbH, Mustafa Mat
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see https://www.gnu.org/licenses.
#
# If your software can interact with users remotely through a computer
# network, you should also make sure that it provides a way for users to
# get its source.  For example, if your program is a web application, its
# interface could display a "Source" link that leads users to an archive
# of the code.  There are many ways you could offer source, and different
# solutions will be better for different programs; see section 13 for the
# specific requirements.
#
# You should also get your employer (if you work as a programmer) or school,
# if any, to sign a "copyright disclaimer" for the program, if necessary.
# For more information on this, and how to apply and follow the GNU AGPL, see
# https://www.gnu.org/licenses.
#

version: "3.9"
services:
  traefik:
    image: traefik:latest
    container_name: traefik
    hostname: traefik
    restart: always
    labels:
      - traefik.enable=true
      - traefik.docker.network=network0
      - traefik.http.routers.bi-traefik.rule=Host(`traefik.${DOMAIN}`)
      - traefik.http.routers.bi-traefik.service=api@internal
      - com.centurylinklabs.watchtower.enable=true
    command:
      - --log.level=INFO
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "443:443"
      - "8080:8080"
      - "80:80"
    environment:
      - TZ=${TZ}
    networks:
      network0:
        ipv4_address: ${SUBNET_TRAEFIK_IPV4}

  init:
    image: ${HUB}technoplatz/bi-init${IMGSUFFIX}:${VERSION}
    container_name: init
    hostname: init
    labels:
      - com.centurylinklabs.watchtower.enable=false
    volumes:
      - bi-cert-volume:/cert
      - bi-mongo0-volume:/data/db
      - bi-mongo0-volume:/data/configdb
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=${TZ}
      - MONGO_HOST=${MONGO_HOST}
      - MONGO_REPLICA1_HOST=${MONGO_REPLICA1_HOST}
      - MONGO_REPLICA2_HOST=${MONGO_REPLICA2_HOST}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - COMPANY_NAME=${COMPANY_NAME}
      - DEPARTMENT_NAME=${DEPARTMENT_NAME}
      - COUNTRY_CODE=${COUNTRY_CODE}
      - STATE_NAME=${STATE_NAME}
      - CITY_NAME=${CITY_NAME}
      - MONGO_SELF_SIGNED_CERTS=${MONGO_SELF_SIGNED_CERTS}
      - MONGO_SECRETS_REPLACE=${MONGO_SECRETS_REPLACE}
      - MONGO_TLS_CA_KEYFILE=${MONGO_TLS_CA_KEYFILE}
      - MONGO_TLS_CERT_KEYFILE=${MONGO_TLS_CERT_KEYFILE}
      - MONGO_TLS_CERT_KEY_PASSWORD=${MONGO_TLS_CERT_KEY_PASSWORD}
    networks:
      network0:
        ipv4_address: ${SUBNET_INIT_IPV4}

  mongo0:
    image: mongo:latest
    container_name: mongo0
    hostname: ${MONGO_HOST}
    restart: always
    depends_on:
      init:
        condition: service_completed_successfully
    labels:
      - com.centurylinklabs.watchtower.enable=true
    expose:
      - "${MONGO_PORT}"
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"
    volumes:
      - bi-cert-volume:/cert:ro
      - bi-mongo0-volume:/data/db
      - bi-mongo0-volume:/data/configdb
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=${TZ}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    command: "/usr/bin/mongod --bind_ip ${SUBNET_MONGO_IPV4} --dbpath /data/db --journal --logpath /var/log/mongodb/${MONGO_HOST}.log --logappend --quiet --replSet ${MONGO_REPLICASET} --port ${MONGO_PORT} --tlsMode requireTLS --tlsCertificateKeyFile /cert/${MONGO_TLS_CERT_KEYFILE} --tlsCertificateKeyFilePassword ${MONGO_TLS_CERT_KEY_PASSWORD} --tlsCAFile /cert/${MONGO_TLS_CA_KEYFILE} --tlsAllowInvalidCertificates --timeZoneInfo /usr/share/zoneinfo"
    links:
      - init
      - mongo1
      - mongo2
    networks:
      network0:
        ipv4_address: ${SUBNET_MONGO_IPV4}

  mongo1:
    image: mongo:latest
    container_name: mongo1
    hostname: ${MONGO_REPLICA1_HOST}
    restart: always
    depends_on:
      init:
        condition: service_completed_successfully
    labels:
      - com.centurylinklabs.watchtower.enable=true
    expose:
      - "${MONGO_PORT}"
    ports:
      - "${MONGO_REPLICA1_PORT}:${MONGO_PORT}"
    volumes:
      - bi-cert-volume:/cert:ro
      - bi-mongo1-volume:/data/db
      - bi-mongo1-volume:/data/configdb
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=${TZ}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    command: "/usr/bin/mongod --bind_ip ${SUBNET_MONGO_REPLICA1_IPV4} --dbpath /data/db --journal --logpath /var/log/mongodb/${MONGO_REPLICA1_HOST}.log --logappend --quiet --replSet ${MONGO_REPLICASET} --port ${MONGO_PORT} --tlsMode requireTLS --tlsCertificateKeyFile /cert/${MONGO_TLS_CERT_KEYFILE} --tlsCertificateKeyFilePassword ${MONGO_TLS_CERT_KEY_PASSWORD} --tlsCAFile /cert/${MONGO_TLS_CA_KEYFILE} --tlsAllowInvalidCertificates --timeZoneInfo /usr/share/zoneinfo"
    links:
      - init
    networks:
      network0:
        ipv4_address: ${SUBNET_MONGO_REPLICA1_IPV4}

  mongo2:
    image: mongo:latest
    container_name: mongo2
    hostname: ${MONGO_REPLICA2_HOST}
    restart: always
    depends_on:
      init:
        condition: service_completed_successfully
    labels:
      - com.centurylinklabs.watchtower.enable=true
    expose:
      - "${MONGO_PORT}"
    ports:
      - "${MONGO_REPLICA2_PORT}:${MONGO_PORT}"
    volumes:
      - bi-cert-volume:/cert:ro
      - bi-mongo2-volume:/data/db
      - bi-mongo2-volume:/data/configdb
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=${TZ}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    command: "/usr/bin/mongod --bind_ip ${SUBNET_MONGO_REPLICA2_IPV4} --dbpath /data/db --journal --logpath /var/log/mongodb/${MONGO_REPLICA2_HOST}.log --logappend --quiet --replSet ${MONGO_REPLICASET} --port ${MONGO_PORT} --tlsMode requireTLS --tlsCertificateKeyFile /cert/${MONGO_TLS_CERT_KEYFILE} --tlsCertificateKeyFilePassword ${MONGO_TLS_CERT_KEY_PASSWORD} --tlsCAFile /cert/${MONGO_TLS_CA_KEYFILE} --tlsAllowInvalidCertificates --timeZoneInfo /usr/share/zoneinfo"
    links:
      - init
    networks:
      network0:
        ipv4_address: ${SUBNET_MONGO_REPLICA2_IPV4}

  replicaset:
    image: ${HUB}technoplatz/bi-replicaset${IMGSUFFIX}:${VERSION}
    container_name: replicaset
    hostname: replicaset
    depends_on:
      mongo0:
        condition: service_started
      mongo1:
        condition: service_started
      mongo2:
        condition: service_started
    labels:
      - com.centurylinklabs.watchtower.enable=true
    volumes:
      - bi-cert-volume:/cert
      - bi-mongo0-volume:/data/db
      - bi-mongo0-volume:/data/configdb
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=${TZ}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_USER_NAME=${ADMIN_USER_NAME}
      - COMPANY_NAME=${COMPANY_NAME}
      - MONGO_DB=${MONGO_DB}
      - MONGO_AUTH_DB=${MONGO_AUTH_DB}
      - MONGO_HOST=${MONGO_HOST}
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_REPLICASET=${MONGO_REPLICASET}
      - MONGO_REPLICA1_HOST=${MONGO_REPLICA1_HOST}
      - MONGO_REPLICA2_HOST=${MONGO_REPLICA2_HOST}
      - MONGO_TLS_CA_KEYFILE=${MONGO_TLS_CA_KEYFILE}
      - MONGO_TLS_CERT_KEYFILE=${MONGO_TLS_CERT_KEYFILE}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_TLS_CERT_KEY_PASSWORD=${MONGO_TLS_CERT_KEY_PASSWORD}
      - PERMISSIVE_TAGS=${PERMISSIVE_TAGS}
    links:
      - mongo0
      - mongo1
      - mongo2
    networks:
      network0:
        ipv4_address: ${SUBNET_REPLICASET_IPV4}

  api:
    image: ${HUB}technoplatz/bi-api${IMGSUFFIX}:${VERSION}
    container_name: api
    depends_on:
      replicaset:
        condition: service_completed_successfully
    hostname: api
    restart: always
    labels:
      - traefik.enable=true
      - traefik.docker.network=network0
      - traefik.http.routers.api.rule=Host(`api.${DOMAIN}`)
      - traefik.http.services.api.loadbalancer.server.port=80
      - com.centurylinklabs.watchtower.enable=true
    volumes:
      - bi-storage-volume:/cron
      - bi-storage-volume:/dump
      - bi-storage-volume:/vault
      - bi-cert-volume:/cert
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "${API_PORT}:80"
    environment:
      - TZ=${TZ}
      - DOMAIN=${DOMAIN}
      - COMPANY_NAME=${COMPANY_NAME}
      - FROM_EMAIL=${FROM_EMAIL}
      - MONGO_DB=${MONGO_DB}
      - MONGO_AUTH_DB=${MONGO_AUTH_DB}
      - MONGO_HOST=${MONGO_HOST}
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_REPLICASET=${MONGO_REPLICASET}
      - MONGO_REPLICA1_HOST=${MONGO_REPLICA1_HOST}
      - MONGO_REPLICA2_HOST=${MONGO_REPLICA2_HOST}
      - API_KEY=${API_KEY}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERID=${SMTP_USERID}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - API_SCHEDULE_INTERVAL_MIN=${API_SCHEDULE_INTERVAL_MIN}
      - API_DUMP_HOURS=${API_DUMP_HOURS}
      - SECUR_MAX_AGE=${SECUR_MAX_AGE}
      - API_OUTPUT_ROWS_LIMIT=${API_OUTPUT_ROWS_LIMIT}
      - API_UPLOAD_LIMIT_BYTES=${API_UPLOAD_LIMIT_BYTES}
      - API_MAX_CONTENT_LENGTH=${API_MAX_CONTENT_LENGTH}
      - NOTIFICATION_SLACK_HOOK_URL=${NOTIFICATION_SLACK_HOOK_URL}
      - MONGO_TLS_CA_KEYFILE=${MONGO_TLS_CA_KEYFILE}
      - MONGO_TLS_CERT_KEYFILE=${MONGO_TLS_CERT_KEYFILE}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_TLS_CERT_KEY_PASSWORD=${MONGO_TLS_CERT_KEY_PASSWORD}
      - PERMISSIVE_TAGS=${PERMISSIVE_TAGS}
      - SAAS=${SAAS}
    links:
      - replicaset
    networks:
      network0:
        ipv4_address: ${SUBNET_API_IPV4}

  pwa:
    image: ${HUB}technoplatz/bi-pwa${IMGSUFFIX}:${VERSION}
    container_name: pwa
    depends_on:
      api:
        condition: service_started
    hostname: pwa
    restart: always
    labels:
      - traefik.enable=true
      - traefik.docker.network=network0
      - traefik.http.routers.pwa.rule=Host(`${DOMAIN}`)
      - traefik.http.services.pwa.loadbalancer.server.port=80
      - com.centurylinklabs.watchtower.enable=true
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "${PWA_PORT}:80"
    links:
      - api
    networks:
      network0:
        ipv4_address: ${SUBNET_PWA_IPV4}

  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    hostname: watchtower
    restart: always
    depends_on:
      traefik:
        condition: service_started
    labels:
      - com.centurylinklabs.watchtower.enable=false
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    command: --interval ${UPDATE_INTERVAL}
    environment:
      - TZ=${TZ}
      - WATCHTOWER_NOTIFICATIONS=${NOTIFICATIONS}
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM=${FROM_EMAIL}
      - WATCHTOWER_NOTIFICATION_EMAIL_TO=${ADMIN_EMAIL}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=${SMTP_SERVER}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=${SMTP_PORT}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=${SMTP_USERID}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=${SMTP_PASSWORD}
      - WATCHTOWER_NOTIFICATION_EMAIL_SUBJECTTAG=${DOMAIN}
      - WATCHTOWER_NOTIFICATION_EMAIL_DELAY=${NOTIFICATION_EMAIL_DELAY}
      - WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER=${DOMAIN}
      - WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL=${NOTIFICATION_SLACK_HOOK_URL}
      - WATCHTOWER_NOTIFICATION_SLACK_CHANNEL=${NOTIFICATION_SLACK_CHANNEL}
      - WATCHTOWER_NOTIFICATION_MSTEAMS_HOOK_URL=${NOTIFICATION_MSTEAMS_HOOK_URL}
      - WATCHTOWER_NOTIFICATION_MSTEAMS_USE_LOG_DATA=${NOTIFICATION_MSTEAMS_USE_LOG_DATA}
    links:
      - traefik
    networks:
      network0:
        ipv4_address: ${SUBNET_WATCHTOWER_IPV4}

volumes:
  bi-mongo0-volume:
    driver: local
    name: bi-mongo0-volume
  bi-mongo1-volume:
    driver: local
    name: bi-mongo1-volume
  bi-mongo2-volume:
    driver: local
    name: bi-mongo2-volume
  bi-storage-volume:
    driver: local
    name: bi-storage-volume
  bi-cert-volume:
    driver: local
    name: bi-cert-volume

networks:
  network0:
    name: network0
    ipam:
      driver: default
      config:
        - subnet: ${SUBNET}
