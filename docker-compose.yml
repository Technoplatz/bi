# 
# Technoplatz BI
# 
# Copyright (C) 2020-2023 Technoplatz IT Solutions GmbH, Mustafa Mat
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see https://www.gnu.org/licenses.
# 
# If your software can interact with users remotely through a computer
# network, you should also make sure that it provides a way for users to
# get its source.  For example, if your program is a web application, its
# interface could display a "Source" link that leads users to an archive
# of the code.  There are many ways you could offer source, and different
# solutions will be better for different programs; see section 13 for the
# specific requirements.
# 
# You should also get your employer (if you work as a programmer) or school,
# if any, to sign a "copyright disclaimer" for the program, if necessary.
# For more information on this, and how to apply and follow the GNU AGPL, see
# https://www.gnu.org/licenses.
# 
# docker-compose up --build --detach --remove-orphans

version: "3.9"
services:
  traefik:
    container_name: traefik
    image: traefik:latest
    hostname: traefik
    restart: always
    command:
      - --log.level=INFO
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
    labels:
      - traefik.enable=true
      - traefik.docker.network=network0
      - traefik.http.routers.bi-traefik.rule=Host(`traefik.${DOMAIN}`)
      - traefik.http.routers.bi-traefik.service=api@internal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - 443:443
      - 8080:8080
      - 80:80
    environment:
      - TZ=${TZ}
    networks:
      - network0

  init:
    container_name: init
    image: ghcr.io/technoplatz/bi-init:latest
    hostname: init
    volumes:
      - bi-storage-volume:/init
      - bi-mongo0-volume:/data/db
      - bi-mongo0-volume:/data/configdb
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=${TZ}
    networks:
      - network0

  mongo0:
    container_name: mongo0
    image: mongo:latest
    hostname: ${MONGO_HOST}
    depends_on:
      - init
    restart: always
    expose:
      - ${MONGO_PORT}
    ports:
      - ${MONGO_PORT}:${MONGO_PORT}
    volumes:
      - bi-storage-volume:/init:ro
      - bi-mongo0-volume:/data/db
      - bi-mongo0-volume:/data/configdb
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./_init/mongod.conf:/etc/mongod.conf
    environment:
      - TZ=${TZ}
    command: "/usr/bin/mongod --config /etc/mongod.conf"
    links:
      - mongo1
      - mongo2
    networks:
      - network0

  mongo1:
    container_name: mongo1
    image: mongo:latest
    hostname: ${MONGO_REPLICA1_HOST}
    depends_on:
      - init
    restart: always
    expose:
      - ${MONGO_PORT}
    ports:
      - "${MONGO_REPLICA1_PORT}:${MONGO_PORT}"
    volumes:
      - bi-storage-volume:/init:ro
      - bi-mongo1-volume:/data/db
      - bi-mongo1-volume:/data/configdb
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./_init/mongod.conf:/etc/mongod.conf
    environment:
      - TZ=${TZ}
    command: "/usr/bin/mongod --config /etc/mongod.conf"
    networks:
      - network0

  mongo2:
    container_name: mongo2
    image: mongo:latest
    hostname: ${MONGO_REPLICA2_HOST}
    depends_on:
      - init
    restart: always
    expose:
      - ${MONGO_PORT}
    ports:
      - "${MONGO_REPLICA2_PORT}:${MONGO_PORT}"
    volumes:
      - bi-storage-volume:/init:ro
      - bi-mongo2-volume:/data/db
      - bi-mongo2-volume:/data/configdb
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./_init/mongod.conf:/etc/mongod.conf
    environment:
      - TZ=${TZ}
    command: "/usr/bin/mongod --config /etc/mongod.conf"
    networks:
      - network0

  replicaset:
    container_name: replicaset
    image: ghcr.io/technoplatz/bi-replicaset:latest
    hostname: replicaset
    depends_on:
      - mongo0
      - mongo1
      - mongo2
    volumes:
      - bi-storage-volume:/init
      - bi-mongo0-volume:/data/db
      - bi-mongo0-volume:/data/configdb
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - USER_EMAIL=${USER_EMAIL}
      - USER_NAME=${USER_NAME}
      - COMPANY_NAME=${COMPANY_NAME}
      - MONGO_USERNAME=${MONGO_USERNAME}
      - MONGO_DB=${MONGO_DB}
      - MONGO_AUTH_DB=${MONGO_AUTH_DB}
      - MONGO_HOST=${MONGO_HOST}
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_REPLICASET=${MONGO_REPLICASET}
      - MONGO_REPLICA1_HOST=${MONGO_REPLICA1_HOST}
      - MONGO_REPLICA2_HOST=${MONGO_REPLICA2_HOST}
    links:
      - mongo0
      - mongo1
      - mongo2
    secrets:
      - mongo-password
    networks:
      - network0

  api:
    container_name: api
    image: ghcr.io/technoplatz/bi-api:latest
    depends_on:
      - replicaset
    hostname: api
    restart: always
    volumes:
      - bi-storage-volume:/cron
      - bi-storage-volume:/dump
      - bi-storage-volume:/vault
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - 5001:80
    labels:
      - traefik.enable=true
      - traefik.docker.network=network0
      - traefik.http.routers.api.rule=Host(`api.${DOMAIN}`)
      - traefik.http.services.api.loadbalancer.server.port=80
    environment:
      - TZ=${TZ}
      - DOMAIN=${DOMAIN}
      - COMPANY_NAME=${COMPANY_NAME}
      - FROM_EMAIL=${FROM_EMAIL}
      - MONGO_USERNAME=${MONGO_USERNAME}
      - MONGO_DB=${MONGO_DB}
      - MONGO_AUTH_DB=${MONGO_AUTH_DB}
      - MONGO_HOST=${MONGO_HOST}
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_REPLICASET=${MONGO_REPLICASET}
      - MONGO_REPLICA1_HOST=${MONGO_REPLICA1_HOST}
      - MONGO_REPLICA2_HOST=${MONGO_REPLICA2_HOST}
      - API_SCHEDULE_INTERVAL_MIN=${API_SCHEDULE_INTERVAL_MIN}
      - API_DUMP_HOURS=${API_DUMP_HOURS}
      - SECUR_MAX_AGE=${SECUR_MAX_AGE}
      - API_OUTPUT_ROWS_LIMIT=${API_OUTPUT_ROWS_LIMIT}
      - API_UPLOAD_LIMIT_BYTES=${API_UPLOAD_LIMIT_BYTES}
    secrets:
      - mongo-password
      - bi-apikey
      - sendgrid-apikey
    networks:
      - network0

  pwa:
    container_name: pwa
    image: ghcr.io/technoplatz/bi-pwa:latest
    hostname: pwa
    restart: always
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - 8100:80
    labels:
      - traefik.enable=true
      - traefik.docker.network=network0
      - traefik.http.routers.pwa.rule=Host(`${DOMAIN}`)
      - traefik.http.services.pwa.loadbalancer.server.port=80
    links:
      - api
    networks:
      - network0

  watchtower:
    container_name: watchtower
    image: containrrr/watchtower:latest
    hostname: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    restart: always
    command: --interval 86400 api pwa watchtower traefik
    networks:
      - network0

volumes:
  bi-mongo0-volume:
    driver: local
    name: bi-mongo0-volume
  bi-mongo1-volume:
    driver: local
    name: bi-mongo1-volume
  bi-mongo2-volume:
    driver: local
    name: bi-mongo2-volume
  bi-storage-volume:
    driver: local
    name: bi-storage-volume

networks:
  network0:
    name: network0

secrets:
  mongo-password:
    file: .secret-mongo-password
  bi-apikey:
    file: .secret-bi-apikey
  sendgrid-apikey:
    file: .secret-sendgrid-apikey
